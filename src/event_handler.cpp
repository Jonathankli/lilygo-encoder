// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 8.3.11
// Project name: SquareLine_Project

#include "ui.h"
#include "websocket.h"
#include <Arduino.h>
#include <ArduinoJson.h>

#define DEBOUNCE_TIME 333  // ms debounce time
unsigned long lastUpdateTime = 0;

void change_brightness(lv_event_t * e)
{
	unsigned long currentTime = millis();
    
    if (currentTime - lastUpdateTime < DEBOUNCE_TIME) {
        return;  // Ignore if within debounce time
    }
    
    lastUpdateTime = currentTime;  // Update last update time
	lv_obj_t * arc = lv_event_get_target(e); // Get the arc object that triggered the event
    int brightness = lv_arc_get_value(arc);  // Get the arc's value (0-100)

	int ha_brightness = map(brightness, 0, 100, 0, 255);
    
    // Send brightness to Home Assistant (assuming sendWSMessage function)
    JsonDocument doc;
    doc["type"] = "call_service";
    doc["domain"] = "light";
    doc["service"] = "turn_on";
    doc["service_data"]["entity_id"] = "light.led_leiste_2";
    doc["service_data"]["brightness"] = ha_brightness;
    sendWSMessage(doc);
}

void power_toggle(lv_event_t * e)
{
	JsonDocument doc;
	doc["type"] = "call_service";
	doc["domain"] = "light";
	doc["service"] = "toggle";
	doc["service_data"]["entity_id"] = "light.led_leiste_2";
	sendWSMessage(doc);
}

void change_color(lv_event_t * e)
{
	unsigned long currentTime = millis();
    
    if (currentTime - lastUpdateTime < DEBOUNCE_TIME) {
        return;  // Ignore if within debounce time
    }
    
    lastUpdateTime = currentTime;  // Update last update time
    
    lv_obj_t * colorwheel = lv_event_get_target(e); // Get color picker object
    lv_color_t color = lv_colorwheel_get_rgb(colorwheel); // Get selected color

    // Convert LVGL color to RGB values
    uint8_t r = (color.ch.red * 255) / 31;   // Scale 5-bit to 8-bit (0-31 → 0-255)
    uint8_t g = (((color.ch.green_h << 3) | color.ch.green_l) * 255) / 63; // Combine green_h & green_l, then scale
    uint8_t b = (color.ch.blue * 255) / 31;  // Scale 5-bit to 8-bit (0-31 → 0-255)

    Serial.print("Color Picked: R=");
    Serial.print(r);
    Serial.print(", G=");
    Serial.print(g);
    Serial.print(", B=");
    Serial.println(b);

    // Send RGB color to Home Assistant
    JsonDocument doc;
    doc["id"] = 26;
    doc["type"] = "call_service";
    doc["domain"] = "light";
    doc["service"] = "turn_on";
    doc["service_data"]["entity_id"] = "light.led_leiste_2";
    doc["service_data"]["rgb_color"][0] = r;
    doc["service_data"]["rgb_color"][1] = g;
    doc["service_data"]["rgb_color"][2] = b;
    sendWSMessage(doc);
}
